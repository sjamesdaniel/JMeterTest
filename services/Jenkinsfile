import java.text.SimpleDateFormat
gv_timeBeforeTest = null
gv_timeAfterTest = null
node()
{
    try {
    
    echo "**** Build Parameters ****"    
    sh("rm -rf *")
    deleteDir()
    checkoutProject()
   // runJMeterScript()
    //sh("rm -rf *")         
	}   
   catch (Exception e)
	{
        //sh("rm -rf *") 
        println 'Exception encountered';      
        sh("sudo docker rm -f masterjmeter")
        sh("sudo docker rmi -f jmeterbase")
        sh("sudo docker rmi -f jmetermaster")
        sh("sudo docker rmi -f jmeterslave ")    		
		throw e 
	}
}

def checkoutProject()
{

    stage ('Checkout Project from Stash')
	{
    echo "**** Chcking out Project ****"    
    try
    {
		// Always check out the main repository, to grab any potential recent changes/pushes
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "/home/ubuntu/jmeterrepo/"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'ce2access', url: "git@github.com:sjamesdaniel/JMeterTest.git"]]])
    }
   catch (Exception e)
	{
        println 'Exception encountered during Checkout';        		
		throw e 
	}
		
       }
}

def runJMeterScript()
{

    stage ('Run JMeter Script') 
	{		  	
    sh ("chmod 777 build.sh")
    sh ("chmod 777 build_images.sh ")
    echo "Build jmeter images test"
    sh ("./build_images.sh $app_name")    
    gv_timeBeforeTest = new Date().getTime().toString()
    echo "Begin jmeter test"
    sh ("./build.sh $app_name specperf")
	  gv_timeAfterTest = new Date().getTime().toString()
    sh("sleep 3m")	
	}
}


